---
- name: Ensure mysql_installers_path_on_target exists (Darwin)
  file:
    path: "{{ mysql_installers_path_on_target }}"
    state: directory
    mode: 0777
  become: true

- name: Check mysql_installers_path_on_target for installer (Darwin)
  find:
    paths: '{{ mysql_installers_path_on_target }}'
    recurse: false
    patterns: '{{ mysql_installer_regex_string }}'
    use_regex: true
  register: target_found

- name: Set mysql_installer_filename (Darwin)
  set_fact:
    mysql_installer_filename: '{{ (target_found.files | first).path | basename }}'
  when: target_found.files | length > 0

- block:

  - name: Find local installers (Darwin)
    find:
      paths: '{{ mysql_local_installers_path_list }}'
      recurse: false
      patterns: '{{ mysql_installer_regex_string }}'
      use_regex: true
    register: local_found
    failed_when: local_found.files | length == 0
    delegate_to: 127.0.0.1

  - name: DEBUG (vv) - local installer filepaths found (Darwin)
    debug:
      msg: "{{ local_found.files }}"
      verbosity: 2

  - name: Set mysql_local_installer_filepath (Darwin)
    set_fact:
      mysql_local_installer_filepath: '{{ (local_found.files | first).path }}'

  - name: INFO - mysql_local_installer_filepath (Darwin)
    debug:
      var: mysql_local_installer_filepath

  - name: Set mysql_installer_filename (Darwin)
    set_fact:
      mysql_installer_filename: '{{ mysql_local_installer_filepath | basename }}'

  - name: Copy installer to target (Darwin)
    copy:
      src: "{{ mysql_local_installer_filepath }}"
      dest: "{{ mysql_installers_path_on_target }}"

  - name: Check for installer in mysql_installers_path_on_target (Darwin)
    stat:
      path: "{{ mysql_installers_path_on_target }}/{{ mysql_installer_filename }}"
    register: installer
    failed_when: installer.stat.exists != true

  when: target_found.files | length == 0
